class ZNNSKU_MARGINS_AMDP definition
  public
  final
  create public .

  public section.

    interfaces IF_AMDP_MARKER_HDB .
    class-methods GET_SKU_MARGINS for table function ZOTP_SKU_MARGINS_TF.

    class-methods GET_WHERE
      importing
        value(MANDT)                type MANDT
        value(CODE_REP)             type STRING
        value(CODE_REC)             type STRING
        value(PERIOD_FROM)          type STRING
        value(PERIOD_TO)            type STRING
        value(TP_AGG)               type STRING
        value(MATERIALS)            type STRING
        value(SIGN)                 type STRING
        value(GROSS_LOW)            type STRING
        value(GROSS_HIGH)           type STRING
      exporting
        value(EV_WHERE_BHEAD)       type STRING
        value(EV_WHERE_BHEADMARGIN) type STRING.

  protected section.
  private section.
endclass.

class ZNSKU_MARGINS_AMDP implementation.

  method GET_SKU_MARGINS by database function for hdb language sqlscript options read-only using /EXAOTP/V_SKU_GM
                                                                                                 ZNSKU_MARGINS_AMDP=>GET_WHERE.

    DECLARE LV_WHERE_BHEAD       STRING;
    DECLARE LV_WHERE_BHEADMARGIN    STRING;

    CALL "ZNSKU_MARGINS_AMDP=>GET_WHERE"(
             MANDT       => :MANDT,
             CODE_REP    => :CODE_REP,
             CODE_REC     => :CODE_REC,
             PERIOD_FROM    => :PERIOD_FROM,
             PERIOD_TO  => :PERIOD_TO,
             TP_AGG     => :TP_AGG,
             MATERIALS  => :MATERIALS,
             SIGN => :SIGN,
             GROSS_LOW => :GROSS_LOW,
             GROSS_HIGH => GROSS_HIGH,
             EV_WHERE_BHEAD => :LV_WHERE_BHEAD,
             EV_WHERE_BHEADMARGIN => :LV_WHERE_BHEADMARGIN );

    LT_SKU_GM = APPLY_FILTER("/EXAOTP/V_SKU_GM", :lv_where_bhead);

    LT_SKU_GM_OUT = select FPLV,
                                  SKU_KEY,
                                  CCODE_SENDER,
                                  CCODE_RECEIVER,
                                  TP_PARTNER,
                                  TP_PARTNER_TYPE,
                                  TP_AGGREGATE,
                                  SENDER_TP_FUNCTION,
                                  SYSID,
                                  MATERIAL,
                                  CCODE_RECEIVER_TYPE,
                                  COUNTRY_RECEIVER,
                                  MATERIAL_DESC,
                                  SUM ( REVENUE ) AS REVENUE,
                                  SUM ( QUANTITY )  AS QUANTITY,
                                  MEINS,
                                  SUM ( MARGIN ) AS MARGIN,
                                  SUM ( COGS ) AS COGS,
                                  SUM ( GROSS_G_PER ) AS GROSS_G_PER,
                                  LOCAL_CURR,
                                  GROUP_CURR
      FROM :LT_SKU_GM GROUP BY FPLV,
                                SKU_KEY,
                               CCODE_SENDER,
                               CCODE_RECEIVER,
                               SENDER_TP_FUNCTION,
                               TP_PARTNER,
                               TP_PARTNER_TYPE,
                               TP_AGGREGATE,
                               SYSID,
                               MATERIAL,
                               MATERIAL_DESC,
                               MEINS,
                               CCODE_RECEIVER_TYPE,
                               COUNTRY_RECEIVER,
                               LOCAL_CURR,
                               GROUP_CURR;

    IF :LV_WHERE_BHEADMARGIN != '' THEN
        LT_SKU_GM_OUT = APPLY_FILTER(:LT_SKU_GM_OUT, :LV_WHERE_BHEADMARGIN);
    end IF;

    if :TOPSKUS != '' THEN
        if :TOPSKUS = 'B' THEN
            LT_SKU_GM_FINAL = select TOP :TOPVAL
                              SKU_KEY
            from :LT_SKU_GM_OUT order by GROSS_G_PER;
        end IF;
        if :TOPSKUS = 'T' THEN
            LT_SKU_GM_FINAL = select TOP :TOPVAL
                              SKU_KEY
            from :LT_SKU_GM_OUT order by GROSS_G_PER DESC;
        end IF;

    END IF;


    IF :TOPSKUS = '' THEN
        LT_SKU_GM_FINAL = select SKU_KEY
        from :LT_SKU_GM_OUT;
    END IF;

    RETURN    SELECT  LT.FPLV,
                              LT.YEAR_PERIOD,
                              LT.SKU_KEY,
                              LT.CCODE_SENDER,
                              LT.CCODE_RECEIVER,
                              LT.TP_PARTNER,
                              LT.TP_PARTNER_TYPE,
                              LT.TP_AGGREGATE,
                              LT.SENDER_TP_FUNCTION,
                              LT.SYSID,
                              lt.MATERIAL,
                              LT.CCODE_RECEIVER_TYPE,
                              LT.COUNTRY_RECEIVER,
                              LT.MATERIAL_DESC,
                              round ( LT.REVENUE, 2 ) as revenue,
                              LT.QUANTITY,
                              LT.MEINS,
                              round ( lt.MARGIN, 2) as margin,
                              round ( lt.COGS, 2) as COGS,
                              round ( lt.GROSS_G_PER , 2) as gross_g_per,
                              LT.LOCAL_CURR,
                              LT.GROUP_CURR
      FROM :LT_SKU_GM AS LT INNER JOIN :LT_SKU_GM_FINAL AS RT ON
              LT.SKU_KEY = RT.SKU_KEY;

  ENDMETHOD.

  method GET_WHERE by database procedure for hdb language sqlscript options read-only.

*Input Multi values for Sending Entity seperated by ,
    DECLARE lv_coderec     string;
    DECLARE lv_coderep     string;
    DECLARE lv_tpagg     string;
    DECLARE lv_materials     string;
    DECLARE temp_str VARCHAR(1333);
    DECLARE out_var VARCHAR(1333) ARRAY;
    DECLARE pos INTEGER :=1;
    DECLARE flag INTEGER := 1;
    DECLARE array_size INTEGER := 0;
    DECLARE left_str VARCHAR(1333);

    ev_where_bhead  = 'MANDT = ''' || :mandt || ''' AND YEAR_PERIOD BETWEEN ''' ||   :period_from || ''' AND ''' || :period_to || '''';
    EV_WHERE_BHEADMARGIN = '';

    IF :CODE_REP != '' THEN
        temp_str = :CODE_REP || ',';
        WHILE(length(:temp_str) > 0 )
        DO
            left_str := substr_before (:temp_str,',');
            temp_str := substr_after (:temp_str,:left_str || ',');
            out_var[pos] := left_str;
            pos := :pos + 1;
        END WHILE;
        lt_tab     = UNNEST(:out_var) AS (fields);
        SELECT COUNT( * ) INTO array_size FROM :lt_tab;
        lt_tab     = SELECT 'CCODE_SENDER= '''|| fields || '''' as fields FROM :lt_tab;
        SELECT TOP 1 string_agg(fields,' OR ') INTO lv_coderep FROM :lt_tab ;
        ev_where_bhead = :ev_where_bhead || ' AND ( ' || :lv_coderep || ' )';

        pos = 1; flag = 1; left_str = ''; out_var  = trim_array(:out_var,:array_size-1);
    END IF;

    IF :CODE_REC != '' THEN
        temp_str = :CODE_REC || ',';
        WHILE(length(:temp_str) > 0 )
        DO
            left_str := substr_before (:temp_str,',');
            temp_str := substr_after (:temp_str,:left_str || ',');
            out_var[pos] := left_str;
            pos := :pos + 1;
        END WHILE;
        lt_tab     = UNNEST(:out_var) AS (fields);
        SELECT COUNT( * ) INTO array_size FROM :lt_tab;
        lt_tab     = SELECT 'CCODE_RECEIVER= '''|| fields || '''' as fields FROM :lt_tab;
        SELECT TOP 1 string_agg(fields,' OR ') INTO lv_coderec FROM :lt_tab ;
        ev_where_bhead = :ev_where_bhead || ' AND ( ' || :lv_coderec || ' )';

        pos = 1; flag = 1; left_str = ''; out_var  = trim_array(:out_var,:array_size-1);
    END IF;

    IF :TP_AGG != '' THEN
        temp_str = :TP_AGG || ',';
        WHILE(length(:temp_str) > 0 )
        DO
            left_str := substr_before (:temp_str,',');
            temp_str := substr_after (:temp_str,:left_str || ',');
            out_var[pos] := left_str;
            pos := :pos + 1;
        END WHILE;
        lt_tab     = UNNEST(:out_var) AS (fields);
        SELECT COUNT( * ) INTO array_size FROM :lt_tab;
        lt_tab     = SELECT 'TP_AGGREGATE= '''|| fields || '''' as fields FROM :lt_tab;
        SELECT TOP 1 string_agg(fields,' OR ') INTO lv_tpagg FROM :lt_tab ;
        ev_where_bhead = :ev_where_bhead || ' AND ( ' || :lv_tpagg || ' )';

        pos = 1; flag = 1; left_str = ''; out_var  = trim_array(:out_var,:array_size-1);
    END IF;

    IF :MATERIALS != '' THEN
        temp_str = :MATERIALS || ',';
        WHILE(length(:temp_str) > 0 )
        DO
            left_str := substr_before (:temp_str,',');
            temp_str := substr_after (:temp_str,:left_str || ',');
            out_var[pos] := left_str;
            pos := :pos + 1;
        END WHILE;
        lt_tab     = UNNEST(:out_var) AS (fields);
        SELECT COUNT( * ) INTO array_size FROM :lt_tab;
        lt_tab     = SELECT 'MATERIAL = '''|| fields || '''' as fields FROM :lt_tab;
        SELECT TOP 1 string_agg(fields,' OR ') INTO lv_materials FROM :lt_tab ;
        ev_where_bhead = :ev_where_bhead || ' AND ( ' || :lv_materials || ' )';
    END IF;


    IF :sign != '' THEN
        IF :sign = 'GT' THEN
            EV_WHERE_BHEADMARGIN = 'GROSS_G_PER > ' || :gross_low;
        END IF;
        IF :sign = 'LT' THEN
            EV_WHERE_BHEADMARGIN = 'GROSS_G_PER < ' || :gross_low;
        END IF;
        IF :sign = 'GE' THEN
            EV_WHERE_BHEADMARGIN = 'GROSS_G_PER >= ' || :gross_low;
        END IF;
        IF :sign = 'LE' THEN
            EV_WHERE_BHEADMARGIN = 'GROSS_G_PER <= ' || :gross_low;
        END IF;
        IF :sign = 'EQ' THEN
            EV_WHERE_BHEADMARGIN = 'GROSS_G_PER = ' || :gross_low;
        END IF;
        IF :sign = 'BT' THEN
            EV_WHERE_BHEADMARGIN = 'GROSS_G_PER > ' || :gross_low || ' AND GROSS_G_PER < ' || :gross_high;
        END IF;
      END IF;

  endmethod.

endclass.


